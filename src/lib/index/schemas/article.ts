import { z } from 'zod'

const _ArticleSchema = z.object({
  _index: z.string(),
  _id: z.string(),
  _score: z.nullable(z.number()),
  _source: z.object({
    created: z.array(z.string()),
    current_version: z.array(z.string()),
    'document.content.core_text.data.text': z.array(z.string()),
    'document.content.core_text.role': z.array(z.string()),
    'document.content.tt_visual.data.caption': z.array(z.string()),
    'document.content.tt_visual.rel.self.data.credit': z.array(z.string()),
    'document.content.tt_visual.rel.self.data.height': z.array(z.string()),
    'document.content.tt_visual.rel.self.data.width': z.array(z.string()),
    'document.content.tt_visual.rel.self.type': z.array(z.string()),
    'document.content.tt_visual.rel.self.uri': z.array(z.string()),
    'document.content.tt_visual.rel.self.url': z.array(z.string()),
    'document.language': z.array(z.string()),
    'document.meta.core_newsvalue.data.duration': z.array(z.string()),
    'document.meta.core_newsvalue.value': z.array(z.string()),
    'document.meta.core_note.data.text': z.array(z.string()),
    'document.meta.core_note.role': z.array(z.string()),
    'document.meta.tt_slugline.value': z.array(z.string()),
    'document.rel.assignment.type': z.array(z.string()),
    'document.rel.assignment.uuid': z.array(z.string()),
    'document.rel.author.data.email': z.array(z.string()),
    'document.rel.author.data.firstName': z.array(z.string()),
    'document.rel.author.data.lastName': z.array(z.string()),
    'document.rel.author.data.longDescription': z.array(z.string()),
    'document.rel.author.data.phone': z.array(z.string()),
    'document.rel.author.data.shortDescription': z.array(z.string()),
    'document.rel.author.title': z.array(z.string()),
    'document.rel.author.type': z.array(z.string()),
    'document.rel.author.uuid': z.array(z.string()),
    'document.rel.section.title': z.array(z.string()),
    'document.rel.section.type': z.array(z.string()),
    'document.rel.section.uuid': z.array(z.string()),
    'document.rel.source.type': z.array(z.string()),
    'document.rel.source.uri': z.array(z.string()),
    'document.rel.source.uuid': z.array(z.string()),
    'document.title': z.array(z.string()),
    'document.type': z.array(z.string()),
    'document.uri': z.array(z.string()),
    'document.url': z.array(z.string()),
    'heads.usable.created': z.array(z.string()),
    'heads.usable.creator': z.array(z.string()),
    'heads.usable.id': z.array(z.string()),
    'heads.usable.version': z.array(z.string()),
    'heads.usable.meta.cause': z.array(z.string()),
    'heads.approved.created': z.array(z.string()),
    'heads.approved.creator': z.array(z.string()),
    'heads.approved.id': z.array(z.string()),
    'heads.approved.version': z.array(z.string()),
    'heads.approved.meta.cause': z.array(z.string()),
    modified: z.array(z.string()),
    readers: z.array(z.string()),
    text: z.null()
  }),
  sort: z.array(z.number())
})

export type Article = z.infer<typeof _ArticleSchema>
